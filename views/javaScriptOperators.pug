extends layout

include mixins/_sideMenu

block withMenu
  .inner
    .javascript
      +sideMenu(h.javaScriptMenu)
      .pageContent
        h1=title
        h6 우리가 수학 계산을 할때 여러 연산자(+,-, *, / 등)들이 있죠. 자바스크립트에도 코딩할때 사용되는 몇몇 종류의 operator(연산자)들이 있습니다. 한글처럼 모든 문장을 글로 써서 컴퓨터랑 소통할수는 없겠죠? 그래서 data들과 operator들을 조합하고 함수 등을 사용해서 컴퓨터에게 소통하여 명령을 내릴수 있는거에요. 그 중에는 산술적 연산자, 대입 연산자, 증감, 비교, 논리, 비트와 기타 몇몇 특이 연산자들이 있습니다.
          span.comment 전 연산자라는 한자어가 잘 와닿지 안아요. Operator : 작동자/작업가 이해를 돕는거 같아요. 개인적인 생각입니다.
          br
          br
          | 연산자 중에는 하나의 데이타에 작동하는 Unary(단항), 2개의 데이타를 사용해 작동하는 Binary(이항), 그리고 3개의 데이터를 사용해서 작업하는 Ternary(삼항) operator 들이 있습니다. 종류별로 나누고 Unary, Binary, Ternary (영어로 하나, 둘, 셋이라는 어원) 나누는게 쉬운것 같습니다.
          br
          br
          | 그리고 연산자를 사용해서 계산 등 작업을할때는 수학과 거의 비슷한 우선 순위가 있어요. 즉, 곱하기가 더하기보다 먼저 시행되잖아요? 그리고 대부분의 연산자들도 왼쪽에서 오른쪽 방향으로 작업을 하며 우선 순위는 괄호 ()를 사용해서 임의 조정이 가능합니다. 
          span.comment 8 = 2 + 2 * 3, 12 = (2 + 2) * 3 둘의 차이와 어떻게 이렇게 계산되는지는 아시죠? 그럼 연산자 사용하실때 일반적인 상식으로 생각하시고 그때그때 다시 찾아보면서 사용하다보면 익숙해지십니다.
          br
          br
          | 위에서 이론적인 설명은 하였으니 간단한 예문으로 연산자들을 종류별로 정리하겠습니다. 아래 예문의 console.log()는 자바스크립트에서 출력값을 미리 볼수 있도록 사용되는 함수입니다. 여기까지 오셨으면 브라우져 developer tool에서 console 탭 사용하는 법은 아셔야 합니다. 
          a(href="https://codepen.io/pen/" target="_blank")  https://codepen.io/pen/ 
                span.comment 편의상 코드펜 링크 드립니다.😄
        .div
          h3 Arithmetic Operators (산술적 연산자)
          p 산술 연산자들은 Binary Operator 입니다. 2개의 피연산자(데이타)를 왼쪽에서 오른쪽으로 계산합니다.
          table.operatorsTable
            thead
              tr
                th 산술 연산자
                th 설명
                th 특이 사항(예문 참고)
            tbody    
              tr
                td +
                td 숫자를 더하거나 문자열을 더하는데 사용
                td 문자열도 더 할수 있음. 숫자와 문자열을 더하면 문자열이됨.
              tr
                td -
                td 빼기
                td 문자열에 사용 못함. 빼려하면 NaN (Not-A-Number 출력됨)
              tr
                td *
                td 곱하기
                td 수학의 곱셈
              tr
                td **
                td 지수
                td 지수는 같은 수를 여러 번 곱하는 수학이죠.
              tr
                td /
                td 나누기
                td 수학의 곱셈
              tr
                td %
                td remainder operator는 나머지 연산이라함
                td 나머지 연산자는 나눗셈과 원리가 같으나, 몫이 아닌 나머지를 구함.
          ul.codeExample
            li 예)  + 더하기
            li console.log(2 + 2);
              small  // 4
            li console.log('이' + '순신');
              small  // "이순신"
            li console.log(2 + true);
              small  // 3 : 컴퓨터에서 true는 숫자 1로 계산됨. false는 0.
            li console.log(2021 + '년 대박');
              small  // "2021년 대박" :숫자와 문자를 더하면 문자열이 됨.
            br
            li 예)  - 빼기
            li console.log(4 - 2);
              small  // 2
            li console.log(4.5 - 6);
              small  // -1.5
            li console.log(4 - true); 
              small  // 3
            li console.log(4 - 'hello');
              small  // NaN : Not-A-Number (숫자 아님이라는 값)
            br
            li 예)  * 곱하기
            li console.log(2 * 3);
              small  // 6
            li console.log(-2 * 3);
              small  // -6
            li console.log('3' * 2);
              small  // 6이 출력됨. 문자열 형식의 숫자를 숫자에 곱하면 숫자로 자동 전환하여 계산한다. 자바스크립트의 coercion (강제 전환)메카니즘에 의한것인데 의도하여 사용하는 경우가 아닌 이상 주의해야하는 자바스크립트의 특성 입니다.
            li console.log('foo' * 2);
              small  // NaN(숫자 아님 값) 숫자가 아닌 문자열에 숫자를 곱하면 계산을 못함으로 NaN을 반환한다.
            br
            li 예)  ** exponent (지수)
            li console.log(3 ** 4);
              small  // 81 출력됨 3 * 3 * 3 * 3 = 81 즉, 삼을 4번 곱한 값
            li console.log(10 ** -2);
              small  // 0.01 수학입니다. 계산기랑 같습니다.
            li  console.log((2 ** 3) ** 2);
              small  // 64 수학과 같이 괄호로 우선 순위를 정합니다.
            br
            li 예)  / 나누기
            li console.log(3 ** 4);
              small  // 81 출력됨 3 * 3 * 3 * 3 = 81 즉, 삼을 4번 곱한 값
            li console.log(10 ** -2);
              small  // 0.01 수학입니다. 계산기랑 같습니다.
            li  console.log((2 ** 3) ** 2);
              small  // 64 수학과 같이 괄호로 우선 순위를 정합니다.
            br
            li 예)  % 나머지 연산
            li console.log(11 % 5);
              small  // 1 11을 5로 2번 나누면 1이 남죠. 정수로 안떨어지고 남는 숫자가 반환됨.
            li console.log(-11 % 5);
              small  // -1
            li  console.log(4 % 2);
              small  // 0
            li  console.log(-4 % 2);
              small  // -0 수학은 수학인데 약간 다르죠? 컴퓨터는 늘 어떤식의 답을 출력하려합니다.
            br
            span.comment 위의 예문들과 같이 자바스크립트의 산술적 연산자는 일반 산수와는 달리 일부 문자열에 대한 작용 또는 타입 자동 전환(coercion)을 함으로 잘 알고 사용해야 합니다. 처음 코딩을 배우시는 분들은 우리가 익숙해있는 산술적 상식 또는 언어 구조와 다르기 때문에 왜 그런지 잘 이해가 안될수있습니디. 이유를 알려고하기 보단 원래 이렇게 프로그래밍 언어가 만들어졌기 때문에 있는 그대로 받아드리고 기억하는편이 좋다고 생각됩니다. 만약 우리가 다른 나라의 언어를 처음 배운다면 문법, 문장의 구조와 순서 등이 우리가 이미 알고있는 언어와 다른것을 왜 그런지 이해하려 하는것보다 언어 자체의 특성을 이해하고 잘 구사하려 생각하는게 쉽다고 생각됩니다.그건 언어 학자들의 몫으로 남겨두고.😄
        .div
          h3 Assignment operators (대입 연산자)
          p 대입 연산자는 왼쪽 변수(피연산 함수)에 오른쪽의 값을 대입할때 사용하는 Binary Operator(이항 연산자)입니다.
          table.operatorsTable
            thead
              tr
                th 대입 연산자
                th 설명
                th 특이 사항
            tbody    
              tr
                td =
                td 대입/소속 연산자
                td 왼쪽 변수에 오른쪽 피연산자의 값을 대입
              tr
                td *=
                td 곱셈 대입 연산자
                td 변수값 곱하기 오른쪽 피연산자의 값을 변수에 저장
              tr
                td **=
                td 지수승하 대입 연산자
                td 변수값을 피연산자의 수만큼 곱하여 변수에 저장
              tr
                td /=
                td 나눗셈 대입 연산자
                td 변수값 나누기 오른쪽값이 변수에 저장
              tr
                td %=
                td 나머지 대입 연산자
                td 변수값 나누기 오른쪽값의 나머지값이 변수에 저장
              tr
                td +=
                td 덧셈 대입 연산자
                td 변수값 더하기 오른쪽값이 변수에 저장
              tr
                td -=
                td 뺏셈 대입 연산자
                td 변수값 빼기 오른쪽값이 변수에 저장
          ul.codeExample
            li 예)  = 대입
            li let x = 1;
            li const y = 2;
            li console.log(x);
              small  // 1
            li console.log(x = y + 1);
              small  // 3
            li console.log(x = x * y);
              small  // 6 출력됨. x가 1에서 3로 변경된 후 2(y값)를 곱하니 x는 6.
            br
            li Chain 대입 예문)
            li let x = 10;
            li let y = 20;
            li let z = 30;
            li x = y = z;
            li console.log(x, y, z);
              small  // 25 25 25 출력됨. 대입 순서가 오른쪽에서 왼쪽으로 제일 오른쪽 값으로 저장됩니다. 
            br
            li 예)  *= 곱셈 대입 연산자
            li let a = 3;
            li console.log(a *= 2);
              small  // 6 출력됨. a = 3 * 2 또는 a = a * 2로 생각하면됨.
            li console.log(a *= "string");
              small  // 출력값: NaN (숫자 아님)
            br
            li 예)  **= 지수 대입 연산자
            li let a = 3;
            li console.log(a **= 2);
              small  // 9 출력됨. 3을 2번 곱함
            li console.log(a **= 0);
              small  // 1 출력됨.
            li console.log(a **= "string");
              small  // 출력값: NaN (숫자 아님)
            br
            li 예)  /= 나눗셈 대입 연산자
            li let a = 3;
            li console.log(a /= 2);
              small  // 1.5 출력됨. a = 3 / 2 또는 a = a / 2
            li console.log(a /= 0);
              small  // 출력값: Infinity (무한대 값)
            li console.log(a /= "string");
              small  // 출력값: NaN (숫자 아님)
            br
            li 예)  %= 나머지 대입 연산자
            li let a = 3;
            li console.log(a %= 2);
              small  // 1 출력됨. a = 3 / 2하고 남은 1이 저장됨
            li console.log(a %= 0);
              small  // 출력값: NaN (숫자 아님)
            li console.log(a %= "string");
              small  // 출력값: NaN (숫자 아님)
            br
            li 예)  += 덧셈 대입 연산자
            li let a = 2;
            li let b = 'hello';
            li console.log(a += 3);
              small  // 5 출력됨.
            li console.log(b += ' world');
              small  // 출력값: "hello world" 문자열 더하면 합쳐짐
            br
            li 예)  -= 뺏셈 대입 연산자
            li let a = 2;
            li console.log(a -= 3);
              small  // -1 출력됨.
            li console.log(a -= 'Hello');
              small  // 출력값: NaN (숫자 아님) 문자열 빼기는 안됨
            br
            span.comment 그 외 <<=, >>=, >>>=, &=, ^=, |=, &&=, ||=, ??= 이런 대입 연산자들도 있지만 아마도 사용하실 일이 없을뿐더라 배우실때는 시간, 에너지 낭비같아서 제외시켰어요. 추후 별도로 정리해드릴게요.
        
        .div
          h3 Increment and decrement (증감 연산자)
          p 증감 연산자는 피연산자를 1씩 증가 혹은 감소시키는 unary(단항) 연산자 입니다. 연산자의 위치에 따라 연산의 순서와 결과를 결정합니다.
          table.operatorsTable
            thead
              tr
                th 증감 연산자
                th 설명
                th 특이 사항
            tbody    
              tr
                td A++
                td 후위 증감 연산자
                td 피연산자의 값 반납 후 1을 더 합니다.
              tr
                td ++A
                td 접두 증감 연산자
                td 1을 더한 후 피연산자 값을 반납합니다.
              tr
                td A--
                td 후위 감소 연산자
                td 피연산자의 값 반납 후 1을 뺍니다.
              tr
                td --A
                td 접두 감소 연산자
                td 1을 뺀 후 피연산자 값을 반납합니다.
          ul.codeExample
            li 예) A++ 여기서 A는 아무개임
            li let x = 3;
            li y = x++;
              small  // y = 3 즉, 첫 연산이 되기전 x값 3을 리턴 후 1을 더함
              small  // x = 4 
            li 예) ++A
            li let x = 2;
            li y = ++x;
              small  // x = 3 즉, 일단 1을 더 하고 x를 리턴함 
              small  // y = 3 
            br
            li 예) A--
            li let x = 3;
            li y = x--;
              small  // y = 3
              small  // x = 2
            li 예) --A
            li let x = 2;
            li y = ++x;
              small  // x = 1
              small  // y = 1 
            br
            span.comment A++ 에서 A는 무작위 값이니 다른 어떤 숫자값이나 변수값으로 대체 가능합니다. 헷갈리지 마셔요.

        .div
          h3 Equality operators (동등 연산자)
          p 동등 연산자의 결과는 항상 Boolean 타입 입니다. true 또는 false 값을 돌려줍니다.
          table.operatorsTable
            thead
              tr
                th 동등 연산자
                th 설명
                th 특이 사항
            tbody    
              tr
                td === 
                td 일치 연산자
                  br
                  | (strict equality)
                td 양쪽 2개의 값이 <strong>같은지</strong> 확인 후 Boolean 값을 반환.
              tr
                td !== 
                td 비일치 연산자
                  br
                  | (strict inequality)
                td 양쪽 2개의 값이 <strong>다른지</strong> 확인 후 Boolean 값을 반환.
              tr
                td == 
                td 동등 연산자
                  br
                  | (equality)
                td 일치 연산자와 달리 타입을 강제 변경 후 <strong>같은지</strong> 확인합니다.
              tr
                td != 
                td 비동등 연산자
                  br
                  | (inequality)
                td 역시 1쪽의 타입을 강제 변경 후 양쪽이 <strong>다른지</strong>확인. 다르면 true.
          ul.codeExample
            li 예) === 일치(strict equality)
            li console.log(2 === 2);
              small  // 출력값: true
            li console.log('coding' === 'coding');
              small  // true
            li console.log('2' ===  2);
              small  // false
            li console.log(0 === false);
              small  // false
              br
              br
            li 예) == 동일(equality)
            li console.log(2 == 2);
              small  // 출력값: true
            li console.log('coding' == 'coding');
              small  // true
            li console.log('2' ==  2);
              small  // true 일치 === 와 차이점인 타입을 강제 변경 후 같다라고 산출.
            li console.log(0 == false);
              small  // true 타입 강제 변경 후 0를 false값으로 인식하여 true를 반환.
            li console.log(1 == true);
              small  // 0은 false고 1은 true 값으로 강제 전환.
              br
              br
            li 예) !== 비일치(strict inequality)
            li console.log(2 !== 2);
              small  // 출력값: false
            li console.log('coding' !== 'coding');
              small  // false
            li console.log('2' !==  2);
              small  // true 하나는 string이고 하나는 숫자이니 다른게 맞습니다.
            li console.log(0 !== false);
              small  // true 타입을 변경 안하니까 하나는 숫자고 하나는 Boolean이니 다릅니다.
              br
              br
            li 예) != 비동일(inequality)
            li console.log(2 != 2);
              small  // 출력값: false
            li console.log('coding' !== 'coding');
              small  // false
            li console.log('2' !==  2);
              small  // false 타입을 변경하니 둘은 같은 값입니다.
            li console.log(0 !== false);
              small  // false 둘이 같다고 인식하는데 다르냐라고 물으니 false(틀렸다 또는 아니다)하죠.
            br
            span.comment 의도치 안은 타입 변경된 결과를 방지하기 위해 == 보단 ===를 사용하시는게 좋습니다.코딩 처음 배울때 Boolean이 은근히 헷갈립니다. 같니? 다르니? 옳다! 그르다! 그건 우리가 사용하는 인간의 언어가 고차원이라 단순하게 생각하는게 익숙하지 안아서 그런거니 그냥 단순하게 생각하시면 됩니다.
        .div
          h3 Relational operators (관계 연산자)
          p 관계 연산자는 피연산자들을 비교하여 Boolean값을 반환합니다.
          table.operatorsTable
            thead
              tr
                th 관계 연산자
                th 설명
                th 특이 사항
            tbody    
              tr
                td < 
                td 미만 연산자
                 br
                 | (less than operator: 보다 적은이란 뜻)
                td 왼쪽값이 오른쪽값보다 작으면 true 반환 / 크면 false
              tr
                td >
                td 초과 연산자
                 br
                 | (greater than: 보다 큰)
                td 왼쪽값이 오른쪽값보다 크면 true 반환 / 작으면 false
              tr
                td <=
                td 이하 연산자
                 br
                 | (Less than or equal: 보다 작거나 같은)
                td 왼쪽값이 오른쪽값보다 같거나 작으면 true 반환 / 크면 false
              tr
                td >=
                td 이상 연산자
                 br
                 | (greater than or equal: 보다 크거나 같은)
                td 왼쪽값이 오른쪽값보다 같거나 크면 true 반환 / 작으면 false
              tr
                td in
                td In operator (안 또는 포함 연산자)
                 br
                 | (in : 안에 라는 뜻)
                td 어떤 property(특징)이 어떠한 Object(사물)안에 들어 있느냐를 확인할때 사용됨
              tr
                td instanceof
                td instanceof operator (instance of 라는 영어는 한국어로 일례 또는 사례로 해석이 되는데)
                td 어떠한 constuctor(생성자)의 prototype property가 어떠한 object(사물)의 prototype chain에 포함이 되느냐?를 확인하는 연산자 입니다.
              
          span.comment 자바스크립트를 prototype-based 언어라고 하는데요. c#, Java, c++등의 class-based(클래쓰 기반) 언어와의 근본적이 차이인것입니다.
            | 그로 c#,Java,c++를 경험한 프로그래머들에겐 헷갈리는 부분이기도하고 자바스크립트만의 유연성을 제공할수 있는 아주 파워풀한 컨셉이죠. 추후 inheritance (상속: 기존 object의 특성과 기능을 모두 상속 받는다)와 prototype chain 이라고 하는 
            | 자바스크립트의 고급 컨셉들을 이해하야지 전반적으로 이해가 되는 컨셉이라서 연산자를 배우시는 단계에서는 이런게 있구나 라고만 알고 계시면 될듯합니다. 이처럼 각각의 자바스크립트의 컨셉과 연산자와 같은 구성원들을 하나씩 이해해가다보면 추후 모두 연결되면서 전체적으로 갑자기 아하! 하는 순간들을 많이 격으셔야지 
            | 이 언어를 어떻게 구사해야하겠구나 하고 감이 오실거에요. 그렇게 컨셉들을 이해하고 실지로 프로젝트나 어플을 만들거나 어떠한 문제를 해결하고자 할때 어떤 컨셉과 구성원들을 조합해서 해결해야겠다라는 생각을 할수 있는것이구요.
            | 뜬 구름 잡는 얘기처럼 들리셔도 당연한거고 굳이 전부를 몰라도 코딩은 할수 있고 시간이 지나면서 이해되는 부분들이니 부담없이 스트레스 안받으셔도 됩니다라고 말해주고 싶네요.
            | 물론 본 코스의 후반부에서 배우시게될 컨셉들이니 그때 다시 자세히 설명드리겠습니다. 기본기부터 순서되로 배우는게 효과적입니다.
          ul.codeExample
            li 예) > 
            li console.log(4 > 3);
              small  // 출력값: true
            li console.log(4 > 4);
              small  // false
            li console.log('ab' > 'aa');
              small  // true 문자열에도 사용 가능
              br
              br
            li 예) <
            li console.log(4 < 3);
              small  // 출력값: false
            li console.log(4 < 4);
              small  // false
            li console.log('ab' < 'aa');
              small  // false
              br
              br
            li 예) >=
            li console.log(4 >= 3);
              small  // 출력값: true
            li console.log(4 >= 4);
              small  // true 같으니 참
            li console.log('ab' >= 'aa');
              small  // true 크니 참
              br
              br
            li 예) <=
            li console.log(4 <= 3);
              small  // 출력값: false
            li console.log(4 <= 4);
              small  // true 같으니 true
            li console.log('ab' <= 'aa');
              small  // false
              br
              br
            li 예) in
            li const car = { brand: 'Hyundai', model: 'Genesis', year: 2020 };
            li console.log('brand' in car);
              small  // 즉, brand라는 property(특질/특징/성질 등으로 해석하면될듯)가 car object(차라는 사물)에 포함되어있느냐?
              small  // 답은 true
              br
              br
            li 예) instanceof
            br
            li function Car(make, model, year) {
            li  &#160 this.make = make;
            li  &#160 this.model = model;
            li  &#160 this.year = year;
            li }
            br
            li const auto = new Car('Hyundia', 'Genesis', 2020);
            br
            li console.log(auto instanceof Car);
              small  // true 즉, auto 라는 변수 안에 든 사물(object)이 Car 라는 사물에서 유례됬니? 또는 Car의 사례 중 하나니?
            br
            span.comment 관계 연산자를 사용해서 얻은 결과의 Boolrean값이 true냐 false냐 컨디션에 따라 명령을 내리고 실행하는 등 할수 있는 연산자를 배운것이에요.
        
        .div
          h3 Binary Logical operators (이항 논리 연산자)
          p 논리식을 판단하며 2개의 피연산자들을 왼쪽에서 오늘쪽으로 결합 후 boolean 값을 반환합니다.
          table.operatorsTable
            thead
              tr
                th 논리 연산자
                th 설명
                th 특이 사항
            tbody    
              tr
                td &&
                td  논리 AND 연산
                 br
                 | (Logical AND operator)
                td 양쪽 논리식이 모두 true(참)일때만 true값을 반환합니다.
              tr
                td ||
                td  논리 OR 연산
                 br
                 | (Logical OR operator)
                td 양쪽 논리식 중 하나 이상 true(참)일때만 true값을 반환합니다.
          ul.codeExample
            li 예) &&
            li const a = 2;
            li const b = -1;
              br
            li console.log(a > 0 && b > 0);
              small  // false 둘 다 true가 아님으로 거짓
              br
              br
            li 예) ||
            li const a = 2;
            li const b = -1;
              br
            li console.log(a > 0 || b > 0);
              small  // true 둘 중 하나가 true일 경우
            br
            span.comment 영어 그대로 &&(AND: 그리고) 와 ||(OR: 또는) 어렵지 안죠?
        .div
          h3 Binary Logical operators (이항 논리 연산자)
          p 논리식을 판단하며 2개의 피연산자들을 왼쪽에서 오늘쪽으로 결합 후 boolean 값을 반환합니다.
          table.operatorsTable
            thead
              tr
                th 논리 연산자
                th 설명
                th 특이 사항
            tbody    
              tr
                td &&
                td  논리 AND 연산자
                 br
                 | (Logical AND operator)
                td 양쪽 논리식이 모두 true(참)일때만 true값을 반환합니다.
              tr
                td ||
                td  논리 OR 연산자
                 br
                 | (Logical OR operator)
                td 양쪽 논리식 중 하나 이상 true(참)일때만 true값을 반환합니다.
              tr
                td ??
                td  null 병합 연산자
                 br
                 | (nullish coalescing operator)
                td 연산자의 왼쪽값이 null 또는 undefined일 경우 오른쪽값을 반환. null이 아니면 왼쪽값을 반환.
          ul.codeExample
            li 예) &&
            li const a = 2;
            li const b = -1;
              br
            li console.log(a > 0 && b > 0);
              small  // false 둘 다 true가 아님으로 거짓
            br
            li 예) ||
            li const a = 2;
            li const b = -1;
            li console.log(a > 0 || b > 0);
              small  // true 둘 중 하나가 true일 경우
            br
            li 예) ??
            li const foo = null ?? 'default value';
            li console.log(foo);
              small  // "default value" 왼쪽값이 null이라 오른쪽값 반환
            br
            li const baz = 1 ?? 42;
            li console.log(baz);
              small  // 1
            br
            li extra) ?? 와 || 사용시 차이
            li let emptyString = '';
            li let notFalsyText = emptyString || 'Hello Korea';
            li console.log(notFalsyText); 
              small  // Hello world 출력. emptyString 은 falsy(거짓값: "", 0, NaN, null, undefined 포함)
            br
            li let preservingFalsy = emptyString ?? 'Hi neighborhood';
            li console.log(preservingFalsy);
              small  // '' emptyString 변수가 null 또는 undefined가 아닌 경우
            span.comment 영어 그대로 &&(AND: 그리고) 와 ||(OR: 또는) 어렵지 안죠?
        //- .div
        //-   h4 변수❓그냥 keyword(var, let, const)쓰고 이름(camelCase) 지어주고 값 저장(= 데이타 값)해주는게 다인데 우리가 지금 한글을 처음 배운다 생각하면 어렵게 느껴지겠죠? 화이팅👏👏
        //-   img.quotes(src='/images/photos/elon-self-taught.png' alt="코딩 독학")
        //-   h4
        //-     a(href="/javascript/operators") 다음은 우리에게 익숙한 연산자들을 배워보겠습니다.👇